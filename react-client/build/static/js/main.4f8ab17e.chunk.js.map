{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["chart","buildChart","res","ctx","document","getElementById","destroy","Chart","handleChange","e","fetch","target","value","then","json","App","state","countries","dates","cases","deaths","recovered","console","log","setState","className","onChange","this","map","country","key","id","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"sJAIIA,E,4FAEJ,SAASC,EAAWC,GAClB,IAAIC,EAAMC,SAASC,eAAe,WAE9BL,GAAOA,EAAMM,UAEjBN,EAAQ,IAAIO,IAAMJ,EAChB,CACE,KAAO,OACP,KAAQ,CACN,OAASD,EAAI,GACb,SAAW,CACT,CACA,MAAQ,QACR,KAAOA,EAAI,GACX,MAAO,EACP,YAAc,oBACd,YAAc,IAEd,CACE,MAAQ,SACR,KAAOA,EAAI,GACX,MAAO,EACP,YAAc,mBACd,YAAc,IAEd,CACE,MAAQ,YACR,KAAOA,EAAI,GACX,MAAO,EACP,YAAc,oBACd,YAAc,MAItB,QAAU,KAIhB,SAASM,EAAaC,GACpBC,MAAM,YAAYD,EAAEE,OAAOC,OACxBC,MAAK,SAAAX,GAAQ,OAAOA,EAAIY,UACxBD,MAAK,SAACX,GACLD,EAAWC,M,IAqEFa,E,4MAzDbC,MAAQ,CACNC,UAAW,GACXC,MAAO,GACPC,MAAO,GACPC,OAAQ,GACRC,UAAW,I,kEAGQ,IAAD,OAElBX,MAAM,YACLG,MAAK,SAAAX,GACJ,OAAOA,EAAIY,UAEZD,MAAK,SAACX,GAELoB,QAAQC,IAAIrB,EAAI,IAChB,EAAKsB,SAAS,CAAEP,UAAWf,EAAI,KAC/B,EAAKsB,SAAS,CAAEN,MAAOhB,EAAI,KAC3B,EAAKsB,SAAS,CAAEL,MAAOjB,EAAI,KAC3B,EAAKsB,SAAS,CAAEJ,OAAQlB,EAAI,KAC5B,EAAKsB,SAAS,CAAEH,UAAWnB,EAAI,KAE/BD,EAAWC,Q,+BAmBb,OAEE,yBAAKuB,UAAU,OACb,4BAAQC,SAAUlB,GAChB,4BAAQI,MAAM,IAAd,aACDe,KAAKX,MAAMC,UAAUW,KAAI,SAACC,EAASC,GAAV,OACxB,4BAAQA,IAAK,UAAUA,EAAKlB,MAAOiB,GAAUA,OAG/C,6BAAK,4BAAQE,GAAG,kB,GApDNC,aC/CEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFpC,SAASC,eAAe,SDyHpB,kBAAmBoC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzB,QAAQyB,MAAMA,EAAMC,a","file":"static/js/main.4f8ab17e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport Chart from 'chart.js';\n\nlet chart; \n\nfunction buildChart(res) {\n  var ctx = document.getElementById('myChart');\n\n  if (chart) chart.destroy()\n\n  chart = new Chart(ctx,\n    {\n      \"type\":\"line\",\n      \"data\": {\n        \"labels\":res[1],\n        \"datasets\":[\n          {\n          \"label\":\"Cases\",\n          \"data\":res[2],\n          \"fill\":false,\n          \"borderColor\":\"rgb(75, 192, 192)\",\n          \"lineTension\":0.1\n          },\n          {\n            \"label\":\"Deaths\",\n            \"data\":res[3],\n            \"fill\":false,\n            \"borderColor\":\"rgb(243, 13, 13)\",\n            \"lineTension\":0.1\n            },\n            {\n              \"label\":\"Recovered\",\n              \"data\":res[4],\n              \"fill\":false,\n              \"borderColor\":\"rgb(13, 243, 103)\",\n              \"lineTension\":0.1\n              }\n        ]\n      },\n      \"options\":{}\n    });\n\n}\nfunction handleChange(e) {\n  fetch(\"/csvdata/\"+e.target.value)\n    .then(res => {return res.json()})\n    .then((res) => {\n      buildChart(res)\n    })\n\n    \n    \n    /*fetch('/users', {method: 'GET'})\n      .then(res => res.json())\n      .then(users => this.setState({ users }));*/\n      \n}\n\nclass App extends Component {\n  state = {\n    countries: [],\n    dates: [],\n    cases: [],\n    deaths: [],\n    recovered: [],\n  }\n\n  componentDidMount() {\n\n    fetch(\"/csvdata\")\n    .then(res => {\n      return res.json()\n    })\n    .then((res) => {\n\n      console.log(res[2])\n      this.setState({ countries: res[0] }); \n      this.setState({ dates: res[1] }); \n      this.setState({ cases: res[2] }); \n      this.setState({ deaths: res[3] }); \n      this.setState({ recovered: res[4] }); \n\n      buildChart(res)\n      \n\n    })  \n\n    \n    /*fetch('/users', {method: 'GET'})\n      .then(res => res.json())\n      .then(users => this.setState({ users }));*/\n\n      \n\n\n\n  }\n\n  \n\n  render() {\n    return (\n    \n      <div className=\"App\">\n        <select onChange={handleChange}>\n          <option value=\"\">Countries</option>\n        {this.state.countries.map((country, key) =>\n          <option key={\"country\"+key} value={country}>{country}</option>\n        )}\n        </select>\n        <div><canvas id=\"myChart\"></canvas></div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}